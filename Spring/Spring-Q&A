Q) What is Spring AOP
A)  Spring AOP enables Aspect-Oriented Programming in spring applications. In AOP, aspects enable the modularization of concerns such as transaction management, logging or security that cut across multiple types and objects (often termed crosscutting concerns).
	a) Aspect:- Aspect is a class
	b) Class contains some methods. These methods are called as Advice.
	c) All methods contains some logic, which is called "cross cutting concerns" that we need to segregate from business logic.
	d) Joinpoint:- A joinpoint always represents a method execution.
	e) These Methods will execute only on some particular condition. These condition is known as pointcut.

Types of Advice:- Before, After, After returning, After throwing advice and Around Advice.
	
AOP has 2 types of implementation.
a) XML configuration files
b) AspectJ Orientation Files.


Q) difference between Pathvariable and ReqParam.
A) If we are using Pathvariable and we are not  giving the input, then will get "404" Error. If we are using Pathvariable, its Mandatory to give the input otherwise it will give error.
Incase of ReqParam, the input is Optional. we wont get any exception.

Q) What is difference between @Bean and @Component in Spring
A) a) @Component auto detects and configures the beans using classpath scanning whereas @Bean explicitly declares a single bean, rather than letting Spring do it automatically.
b) @Component is a class level annotation whereas @Bean is a method level annotation and name of the method serves as the bean name.
c) @Bean annotation has to be used within the class which is annotated with @Configuration whereas we dont need @Configuration while using @Component.
d) We cannot create a bean of a class using @Component, if the class is outside spring container whereas we can create a bean of a class using @Bean even if the class is present outside the spring container.
e) @Component has different specializations like @Controller, @Repository and @Service whereas @Bean has no specializations.

Q) When should we use @Bean?
A) @Bean is an annotation based configuration and hence is used in @Configuration based class. This is an explicit way of defining a bean
Sometimes automatic configuration is not an option. When? Let's imagine that you want to wire components from 3rd-party libraries (you don't have the source code so you can't annotate its classes with @Component), so automatic configuration is not possible.

Scenario : You downloaded a jar file from GitHub and it is not using Spring. The jar file is a simple and basic java program. Your app wants to use this third-party jar file but since your application is using Spring while the third party jar is not, you will have to write new() keyword to access the functionalities. You want to wire the third party classes.

Say your class name is MyClass.java and you want to use ThirdPartyClass.java. In this case if you write

public class MyClass{
   .....
	 @Autowired
	 ThirdPartyClass thirdPartyClass;
	 
}

Your code will throw NullPointerException if you try and access any method of class object thirdPartyClass. In this scenario, you should use @Bean.

-> If you want to use third-party classes or jar then use @Bean.
-> If you want to use a third party class or jar that is not written using Spring Component then use @Bean.
