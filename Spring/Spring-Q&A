Q) What is the Use of @ExceptionHandler
A) @Exceptionhandler catches the Exception in the Controller.
-> You can have multiple methods annotated with ExceptionHandler inside this controller with valid exceptions classes.

Drawback:
---------
-> These Exception handlers are active only inside that controller. It wont work outside of that controller or it wont for other controllers.
-> If There are multiple controllers, then we need to define @ExceptionHandler in each Controller.
-> There is an annotation available that makes it happen, it is called @ControllerAdvice which will segregate the ExceptionHandlers into a common class so that we can maintain in future as well.

Q) What is the use of @ControllerAdvice
A) There are several ways to handle exceptions in Spring Boot. One way is to use the @ControllerAdvice annotation. 
-> This annotation allows you to create a global exception handler that can catch and handle exceptions that occur in any controller in your application.
-> The @ControllerAdvice annotation is used to define a class that will be called whenever an exception is thrown in your application. This class can contain multiple methods, each of which is annotated with the @ExceptionHandler annotation and is responsible for handling a specific exception.

Q) What is the use of @ResponseBody
A) If we use @ResponseBody annotation on top of method, Spring will try to convert its return value and will write it to the HTTPResponse Automatically.
-> We dont get the Default Json value which contains timestamp, status, error, message and path. Will get only message as String.
-> Response will be only "List name will be required field" as a Single String.

Q) What is the use of  @RestControllerAdvice
A) If we are working on resful service, then we can change this @ControllerAdvice to @RestControllerAdvice. @RestControllerAdvice combines both "@ControllerAdvice+@ResponseBody" in it.
-> By this way, we dont need to Explicitly annotate the method with @ResponseBody.

Q) What is Bean in Spring
A) In Spring, a bean is an object that is managed by the Spring IoC (Inversion of Control) container. 
-> It is an instance/object of a class that is configured and controlled by Spring.
-> Beans are typically used to represent components and services within a Spring application.

Q) What are the Bean Scopes in Spring
A) Spring beans can have different scopes that indicate how their lifecycle and availability will be managed in the Application Context. Some of the most common scopes for Spring beans are:

Singleton
Prototype
Request
Session
Application

Singleton:- This is the default spring bean scope. When a bean has a singleton scope, it means that only a single instance of the bean is created per Spring application context. 
-> This instance is stored in memory and reused each time the bean is requested in the future, rather than creating a new instance for each request.
-> Each time the bean is requested, the same previously created instance is returned, if it already exists.
Drawback:- The same singleton bean is shared between different components or classes that inject it into their Spring application context. This may have impact while working with concurrency and bean state, so care must be taken when handling shared data in singleton beans.

Prototype:- In Prototype Bean Scope, New instance of the bean is created on each request.
-> Bean instances with prototype scope do not share their state with other bean instances. Each instance has its own independent state and any modification to one bean instance will not affect other instances.
Drawback:- Increased in Memory and higher resource consumption as more instances are created and destroyed.

Request:- In Request Bean Scope, New instance of the bean is created for each HTTP request that arrives at the server. 
-> This instance of the bean will be available for the duration of the processing of that specific request, and will be destroyed at the end of the request.
-> The request scope is especially useful in WebApplications such as Spring MVC, where you need to have a specific bean instance for each request and you want to share the same bean between different components within the same request lifecycle.

Session:- In Session bean scope, A single instance of the bean is created for each HTTP session that is established in the application. 
-> This instance of the bean will be available for the duration of the user’s session, and will be destroyed at the end of the session.
-> The session scope is available only in Spring MVC-based web applications, as it refers to the management of instances in the context of an HTTP session.
-> The session”scope is especially useful in web applications, where specific user session information needs to be maintained, such as authentication data, user preferences or session state.

Application:- In Application Bean scope, A bean instance is created at the start of the application and is maintained for the lifetime of the application. 
-> This means that there will only be a single instance of the bean in the entire application, and all parts of the application will access the same instance.
-> The bean instance is stored in a global scope and can be accessed from any part of the application. This allows sharing global data or functionality in the application, such as configurations, utilities, cache objects, and so on.
-> The Application scope is useful to define beans that need to be shared between multiple components, services or controllers in a Spring application, and that need to maintain a global state and be accessible from any part of the application.

Q) What is Spring Actuator
A) Spring Boot Actuator is a sub-project of the Spring Boot Framework. It uses HTTP endpoints to expose operational information about any running application.
-> The main benefit of using this library is that we get health and monitoring metrics from production-ready applications. Moreover, the gathering of metrics, understanding traffic, or knowing the state of the database, becomes tremendously easy with Actuator.

Q) What is dependency injection in Spring?
A) Dependency Injection is a design pattern/module of the Spring framework, through which the Spring container “injects” objects into other objects or “dependencies”. 
   Dependency Injection makes our programming code loosely coupled. So that it can be easy to manage and test the application. 

Q) How Spring MVC Works
A) A Spring MVC provides an elegant solution to use MVC in spring framework by the help of DispatcherServlet. Here, DispatcherServlet is a class that receives the incoming request and maps it to the right resource such as controllers, models, and views.

Step 1 - When the client (browser) sends an HTTP request to a specific URL. The DispatcherServlet of Spring MVC receives the request.
Step 2 - DispatcherServlet consult to HandlerMapper to identify which controller is responsible to handle the HTTP request.
Step 3 - HandlerMapper selects the controller which is mapped to the incoming request URL and returns the (selected Handler) and Controller details to DispatcherServlet.
Step 4 - Now DispatcherServlet knows which controller is responsible to process the request so DispatcherServlet will forward that request to the corresponding controller to process the request.
Step 5 - Now the Controller process the request, validates the request, and creates a model with data. Finally, the Controller returns the logical name of view and model to the DispatcherServlet.
Step 6 - DispatcherServlet consult ViewResolver to resolve a logical view with the physical view that exists in the application.
Step 7 - ViewResolver responsible to map logical view with actual view and return the actual view details back to the DispatcherServlet.
Step 8 - Now DispatcherServlet sends the view and model to the View component.
Step 9 - The View component merge view and model and forms a plain HTML output. Finally, the View component sends HTML output back to the DispatcherServlet.
Step 10 - The DispatcherServlet finally sends HTML output as a response back to the browser for rendering.

Q) Difference between @Qualifier and @Primary
A) @Primary:- When we annotate @Primary on top of class or Bean, then that particular class or bean will be given highest priority to inject the Dependency and that particular 
   bean will get invoked even if Spring founds multiple beans with same name.
@Qualifier:- @Qualifier can be applied on top of @Autowired. The @Qualifier annotation is used to resolve the Ambiguity (or) autowiring conflict, when there are multiple beans with same name.
   
Q) Difference between @Inject and @Autowired
A) @Autowired annotation is part of the Spring framework But @Inject is a standard annotation for dependency injection.
-> By default, Dependency Injection for @Autowired is true, means Spring wont run or throw Exception if Bean is not Found.
   We can change this behavior by using @Autowired(required=false). In this case, even if bean is not found for dependency injection, it will not throw error.
   But @Inject annotation has no required attribute. Therefore, if the dependencies will not be found - will be thrown an exception.
-> @Qualifier can be used in case of ambiguity while working with @Autowired and we use @Named Qualifier while working with @Inject.
-> @Inject is portable and can be used in spring framework and as well as with some other application. But @Autowired will work only with Spring Framework specific.

Q) What is the Difference Between Constructor Injection and Setter Injection.
A) Constructor Injections are Mandatory Injection whereas Setter Injection is Non-Mandatory Injections.
-> i.e. If Spring Application won't find the Bean, then Spring will run, if we define "@Autowired(required=false)" incase of Setter Injection, but it will fail for Constructor Injections.
-> Bean must and should be declared and Found, in case of Constructor Injection. Spring won't run even if we define "@Autowired(required=false)".

Q) What is Autowire By Properties or Autowire By Name
A) When we Autowire the Implementation By Name. Spring Automatically recognises the class or Bean with the given Name and Autowires Easily. Below is Example,
Ex:-
---
private Animal product;

AutowiredController(@Qualifier"order") Product product){
	this.product = product;
}
Note:- order is a class/bean annotated with @Bean. While Autowiring, we have given the "property name" as "product" which is a bean name, to inject the Dependency.

Q) What is Spring AOP
A)  Spring AOP enables Aspect-Oriented Programming in spring applications. In AOP, aspects enable the modularization of concerns such as transaction management, logging or security that cut across multiple types and objects (often termed crosscutting concerns).
	a) Aspect:- Aspect is a class
	b) Class contains some methods. These methods are called as Advice.
	c) All methods contains some logic, which is called "cross cutting concerns" that we need to segregate from business logic.
	d) Joinpoint:- A joinpoint always represents a method execution.
	e) These Methods will execute only on some particular condition. These condition is known as pointcut.

Types of Advice:- Before, After, After returning, After throwing advice and Around Advice.
	
AOP has 2 types of implementation.
a) XML configuration files
b) AspectJ Orientation Files.


Q) difference between Pathvariable and ReqParam.
A) If we are using Pathvariable and we are not  giving the input, then will get "404" Error. If we are using Pathvariable, its Mandatory to give the input otherwise it will give error.
Incase of ReqParam, the input is Optional. we wont get any exception.

Q) What is difference between @Bean and @Component in Spring
A) a) @Component auto detects and configures the beans using classpath scanning whereas @Bean explicitly declares a single bean, rather than letting Spring do it automatically.
b) @Component is a class level annotation whereas @Bean is a method level annotation and name of the method serves as the bean name.
c) @Bean annotation has to be used within the class which is annotated with @Configuration whereas we dont need @Configuration while using @Component.
d) We cannot create a bean of a class using @Component, if the class is outside spring container whereas we can create a bean of a class using @Bean even if the class is present outside the spring container.
e) @Component has different specializations like @Controller, @Repository and @Service whereas @Bean has no specializations.

Q) When should we use @Bean?
A) @Bean is an annotation based configuration and hence is used in @Configuration based class. This is an explicit way of defining a bean
Sometimes automatic configuration is not an option. When? Let's imagine that you want to wire components from 3rd-party libraries (you don't have the source code so you can't annotate its classes with @Component), so automatic configuration is not possible.

Scenario : You downloaded a jar file from GitHub and it is not using Spring. The jar file is a simple and basic java program. Your app wants to use this third-party jar file but since your application is using Spring while the third party jar is not, you will have to write new() keyword to access the functionalities. You want to wire the third party classes.

Say your class name is MyClass.java and you want to use ThirdPartyClass.java. In this case if you write

public class MyClass{
   .....
	 @Autowired
	 ThirdPartyClass thirdPartyClass;
	 
}

Your code will throw NullPointerException if you try and access any method of class object thirdPartyClass. In this scenario, you should use @Bean.

-> If you want to use third-party classes or jar then use @Bean.
-> If you want to use a third party class or jar that is not written using Spring Component then use @Bean.

Q) What is ACID in SpringBoot
A) ACID is an acronym that stands for atomicity, consistency, isolation, and durability.
-> Atomicity describes an all or nothing principle. Either all operations performed within the transaction get executed or none of them executed.
-> If anything or any transaction goes wrong, we can rollback the changes from Database. With this we can avoid or ignore Data inconsistency in our application.

Q) What is Atomicity
A) Atomicity − A transaction should be treated as a single unit of operation, which means either the entire sequence of operations is successful or unsuccessful. 
-> Consistency − This represents the consistency of the referential integrity of the database, unique primary keys in tables, etc.

Q) What is JDBC Template
A) JDBCTemplate is a class in Spring which is used to execute the queries. It also provides different methods for querying/retrieving data from the database.
-> JDBC is not an ORM tool, it does not represent any rows as objects in DB whereas Hibernate does that.
-> If we are not using Hibernte in our Project, we can use JDBCTemplate to query and retrive the data from Database.

Methods:-
--------
jdbcTemplate.query(queryString), jdbcTemplate.queryForList(queryString) and jdbcTemplate.update(queryString).

Q) Difference between Junit and Mockito
A) JUnit is the Java library used to write tests (offers support for running tests and different extra helpers - like setup and teardown methods, test sets etc.).
   JUnit is used to test APIs in source code. To test APIs in JUnit, sometimes we may require data classes. To create those, we can use mockito.
-> Mockito is a library that enables writing tests using the mocking approach. 
   Mock refers to creating duplicate or dummy objects.
   
Q) Difference between Mock and Spy
A) Mock:- When using mock objects, the default behavior of the method when not stub is do nothing. Simple means, if its a void method, then it will do nothing when you call the method or if its a method with a return then it may return null, empty or the default value.
Spy:- While in spy objects, of course, since it is a real method, when you are not stubbing the method, then it will call the real method behavior. If you want to change and mock the method, then you need to stub it.
-> If you want to be safe and avoid calling external services and just want to test the logic inside of the unit, then use mock. If you want to call external service and perform calling of real dependency, or simply say, you want to run the program as it is and just stub specific methods, then use spy.
-> The difference is that in mock, you are creating a complete mock or fake object while in spy, there is the real object and you just spying or stubbing specific methods of it.




