MicroService:-
--------------
https://www.youtube.com/watch?v=5s9pR9UUtAU Microservices Logging | ELK Stack | Elastic Search | Logstash | Kibana | JavaTechie
https://www.youtube.com/watch?v=kJl1bE1oI1s MS Interview Questions part-1
https://www.youtube.com/watch?v=no65NmNZWz0 MS Interview Questions part-2
https://www.youtube.com/watch?v=G0waumbpK48 MS Interview Questions and Answers
https://www.youtube.com/watch?v=_4n7NpdCECg MS Most Asked Architecture Interview Questions
https://www.youtube.com/watch?v=vZQMoY_2_AA MS Logging
https://www.youtube.com/watch?v=tljuDMmfJz8 MS using Spring Cloud and Spring Boot
https://www.youtube.com/watch?v=_PQd6aZ-ANk MS Crash course for Beginners
https://www.youtube.com/watch?v=BnknNTN8icw Microservices using SpringBoot | Full Example | Code Buffer (1h 30m) *
https://www.youtube.com/watch?v=9AXAUlp3DBw Microservices using SpringBoot (Part-2) | Code Buffer (35 mins) *
https://www.youtube.com/watch?v=b6R4dElDtRc Microservice | Resilience4J Circuit Breaker Implementation on Spring Boot | Java Techie (25m)
https://www.youtube.com/watch?v=niqew7GPP4k Adding Hystrix to a Spring Boot app - Spring Boot Microservices Level 2
https://www.youtube.com/watch?v=jZABh-gG6fM Hystrix circuit breaker And Fault Tolerance in Microservices Spring boot
https://www.youtube.com/watch?v=O5ou6lBwWYw ELK Stack + Spring Boot Microservice Hello World Example
https://www.youtube.com/watch?v=Nj57wpe_vEg Core Java, Spring Boot, Microservice Interview Questions | Cognizant L1 Technical Interview


Spring:-
--------
https://www.youtube.com/watch?v=qki1N71BJ-M Top 10 spring boot Interview questions [most frequently asked java Interview questions and answers]
https://www.interviewbit.com/maven-interview-questions/


Spring Boot:-
-------------
https://www.youtube.com/watch?v=2YC5pIXR7e4 Spring Boot - @Autowired, @Qualifier, @Primary, @Required | Simple Programming
https://www.youtube.com/watch?v=qlygg_H1M20 How Spring Boot works internally
https://www.youtube.com/watch?v=htyq-mER0AE Spring Boot Annotations Interview QA
https://www.youtube.com/watch?v=2x9G8daUM8A Spring Cloud Hystrix Circuit Breaker with spring boot | Java Techie
https://www.youtube.com/watch?v=htyq-mER0AE Interview QA | 40+ Spring & Spring Boot Annotations Everyone Should Know | JavaTechie * (1h)
https://www.youtube.com/watch?v=NKhNnBvufGI Annotations in Spring boot with Explanation| Spring boot Interview Questions and Answers Code Decode
https://www.youtube.com/watch?v=95kxPSbHzVg Spring Boot | Spring Data JPA Transaction Management | @Transactional | JavaTechie
https://www.youtube.com/watch?v=gPnd-hzM_6A Spring Boot | REST API Request Validation & Exception Handling Realtime Example | JavaTechie
https://www.youtube.com/watch?v=AFmyV43UBgc Cracking the coding interview || Java streams Coding questions
https://zetcode.com/springboot/mongodb/ Spring Boot MongoDB
https://www.youtube.com/watch?v=gPnd-hzM_6A Spring Boot | REST API Request Validation & Exception Handling Realtime Example | JavaTechie
https://www.youtube.com/watch?v=95kxPSbHzVg Spring Boot | Spring Data JPA Transaction Management | @Transactional | JavaTechie


Java:-
------
https://www.youtube.com/watch?v=k7fNLXoVCYg Java 8 Interview Questions and Answers
https://www.youtube.com/watch?v=KfoNYoVUBJI Java collections framework interview questions | [MOST ASKED COLLECTIONS INTERVIEW QUESTION]  (27)
https://www.youtube.com/watch?v=GO67C7V-IbQ Java Collection Interview Questions & Answers | Tricky Q&A | Freshers | Experience | JavaTechie (59)
https://www.youtube.com/watch?v=fFnuer3AD8Q Frequently Asked Java Interview Q&A | Tricky Questions | Freshers | Experience | Part-1| JavaTechie
https://www.youtube.com/watch?v=Tapz6_T5oHY Java -8 Consumer , Supplier & Predicate Interface With Example | Java Techie (26)
https://www.youtube.com/watch?v=oUdENE7ljjw&t=25s Java 8 new features || Java 8 Interview Questions and Answers ( Live Demo with Examples ) (20)
https://www.youtube.com/watch?v=EmTg7Mb98Ac Java Interview Questions and Answers

Q) What is microservices and example?
A) Microservices are an architectural style that develops a single application as a set of small services. Each service runs in its own process. The services communicate with clients, and often each other, using lightweight protocols, often over messaging or HTTP.

Q) What are the components of a microservice?
A)  a) Microservices 
	b) Containers
	c) Service mesh 
	d) Service discovery
	e) API gateway
	
a) MicroServices:- The main component of microservices architecture is the self-contained services. They can be any language and function separate from one another, making them ideal for implementation through various software teams.

b) Containers:- The containers are a package of software that functions independently. Containers work to isolate each service in the same environment.
In order to create microservices, a virtual machine can serve as a container and simulate the functionaries of a standard physical computer.
Containers provide efficiency because they only rely on specific dependencies and the underlying code within the service.

c) Service mesh:- It's responsible for the communication between microservices via a messaging layer. A Service Mesh is layer that makes communication between microservice applications possible, structured, and observable. A service Mesh also monitors and manages network traffic between microservices, redirecting and granting or limiting access as needed to optimize and protect the system.

d) Service discovery:- The service discovery helps manage deployment and evenly distribute the load. This component features a service consumes, service provider, and service registry.
-> In order to send an API request to a service, the client or API gateway must know the location of the service that itâ€™s addressing.
-> The service provider registers its location in the service registry.
-> The client looks for relevant service locations in the service registry.
-> The service registry returns the location of the required microservice.
-> The client directly calls the microservice.

e) API gateway:- An API gateway is a software application between a client and a set of backend microservices. The API Gateway serves as a reverse proxy to accept API calls from the client application, forwarding this traffic to the appropriate service.

Q) What is Service Registry
A) A service registry is a database used to keep track of the available instances of each microservice in an application. The service registry needs to be updated each time a new service comes online and whenever a service is taken offline or becomes unavailable. This can be achieved with either self-registration or third-party registration.
-> We use ServiceRegistry to manage all vast details, Scale Up and maintain all ports and URI information of all MS. ServiceRegistry Will maintain all the MS's. All the MS's will be connected to this ServiceRegistry and will get all the information regarding all the services.
ex:- status update, what are the port info and URL etc.

Q) What is Eureka Server in Microservice
A) Eureka Server is an application that holds the information about all client-service applications. Every Micro service will register into the Eureka server and Eureka server knows all the client applications running on each port and IP address. Eureka Server is also known as Discovery Server.

Q) what is config server in microservices
A) Config Server is an externalized application configuration service. It is based on the open-source Spring Cloud Config project, which provides a centralized server for delivering external configuration properties to an application and a central source for managing this configuration across deployment environments.

Q) Microservice vs Service-Oriented architecture
A) While microservices use loose connections and APIs, SOA uses protocols to create an application and create functionality and compatibility for services.
This system lacks when it comes to operating within the cloud and cloud computing processes. It can't compete due to latency and lack of scalable service. 
There are varying opinions on the evolution of SOA to microservices. Many feel it's a more granular approach to application architecture, while others think it's platform-agnostic and may find its purpose within the microservices management process and architecture pattern.
Its new features allow it to handle cloud-based services and computing with ease and fewer restrictions for parts of the application.


Q) Why Microservices are better than Monolithic architecture
A) As mentioned previously, microservices are so compatible with today's need to scale business because they create independent connections that are flexible and customizable.
-> With monolithic architecture, one executable file is stored with the code, making it more complex to use and troubleshoot.
-> In the microservices system, it's easy to define and locate the source of the code issues, whereas, in a monolithic architecture, it's much more difficult to pinpoint. That means more workforce demands and holdups or delays.
-> Testing also creates a situation where more intensive efforts are needed. When there are any changes or updates, the entire application is affected and may require a new version of the application. All of these points add up to considerably more cost, maintenance, and planning when using a monolithic application.
-> Monolithic applications are also challenging to scale with constantly changing needs.


Q) Benefits of Microservices
A) A microservices application is designed to create scalability via pipelines. This service-oriented architecture is more straightforward for development teams to navigate and maintain from day to day.
-> Integrating this system for data management reduces latency. It can also optimize the technology stack to make a business capable of adding additional services as well as make connecting with a web application and various platforms less complex.


Q) Drawbacks to Using Microservices Architecture
A) While there are many advantages to using this architectural style, there are some potential disadvantages to consider. For example, there might be some latency at times if considerable use occurs.  
-> There may also be some comprehensive security requirements along with complex testing. Extra attention is sometimes required to create communications channels between connected services. And finally, there may be too much granularity within the complex web of connections.


Microservice orchestration:-
----------------------------
Microservice orchestration, the orchestrator (central controller) handles all the microservice interactions. It transmits the events and responds to it. The microservice Orchestration is more like a centralized service. It calls one service and waits for the response before calling the next service.

Challeges with Micro Service:-
------------------------------
Bounded context:- what is the right context to build the MS. (boundary of MS and what to do with each MS).
Configuration Management:- 
Dynamic Scale Up and Scale Down:- Distribute the load of Instances. 1 MS can have 1 env with multiples Instances.
Visibility:- Which MS caused the problem. Identify which MS's are down.
FaultTolerance:- If a service is down.

SpringCloudConfigServer:- (Problem solver for Configuration Management)
--------------------------
SpringCloudConfigServer provides an approach, where we can store all the configurations for all the different env's of all the MS's in a git repo(Centralized Location). SpringCloudConfigServer can be used to expose the configurations to all the microservices. This makes help to put all configurations in 1 place and easy to maintain the configuration for all the microservices.

Ribbon Load Balancing:- (Problem solver for Dynamic Scale Up and Scale Down)
-----------------------
Ribbon can be used to distribute the load between all the instances. Checks dynamically available instance to distribute the load among all of them.
Ribbon can be used for client side load balancing. So that load can be equally distributed among the existance Instances.

Hystrix:- (Problem solver for FaultTolerance)
---------
If a service is down, Hystrix helps us to configure a default response.

MS's are solution for monolith Application.

Setter Injections are not mandatory Injection whereas Constructor injections are mandatory dependency(injection).
@Autowired(required = false) doesn't have any impact on Constructor


Dependencies for Creating ServiceRegistry MS:-
----------------------------------------------
Eureka Server (Spring Cloud Discovery)

Default port no. for eureka server is 8761.

Below is the eureka client we need to provide for client registry in ServiceRegistry MS

For ServiceRegistry MS ( In application.yml )
----------------------------------------------
eureka:
  client:
    register-with-eureka: false
	fetch-registry: false
	
Note:-
------
register-with-eureka and fetch-registry are false because "ServiceRegistry MS" itself is a server and we dont have to go to eureka server for registering itself.


In User and Department MS, we need to implement Eureka client. And "register-with-eureka" and "fetch-registry" will be true, so that User and Department can be considered as client and these MS's can be connect with the Eureka Server.

Some configuration Changes in User and Department MS's:-
---------------------------------------------------------
pom.xml:- we need to add the dependencies here.

Search for Eureka Discovery client in start.spring.io and click on it and click on explore.

a) copy the "spring.cloud.version" from properties tag and paste it in to Department Service pom.xml file under properties tag.
ex:- <spring.cloud.version> Hoxton.SR8 <spring.cloud.version>

b) copy the dependency tag which states "spring-cloud-starter-netflix-eureka-client" and paste in to Department Service pom.xml file under dependency section.

c) Add/copy the "dependency Management" and "build" tag and paste it in Department Service pom.xml file post "Dependencies" tag.
Note:- Build info should be replaced with existing build in Department Service.

The Above 3 points needs to be perform in User MS as well.


In User Service/MS (9002), Need to add configuration Details in application.yml.
Below is the example of configuration Details:-
-----------------------------------------------
eureka:
  client:
    register-with-eureka: true
	fetch-registry: true
	service-url:
	  default-zone: http://localhost:8761/eureka/
  instance:
   hostname: localhost
   
Note:- "register-with-eureka" and "fetch-registry" are true because this can go ahead and connect to the service registry but where ?? So for that we have given the URL. "service-url" and "default-zone" with port 8761, is the same port which we have given in service registry MS.
"hostname" can be replaced by the production url.

Add Name of the Application:-
-----------------------------
spring:
  application:
    name: User-Service
	
The Above steps can be added in Department Service (9001) as well.


Start Service Registry MS and go to browser and type url "localhost:8761" and press enter. Will see Spring Eureka Page in browser.

Start User and Department Service, and will be able to see both the Services are registered to my Service registry under "Instances currently registered with Eureka" in Spring Eureka Page.

In User Service we have called the Department Service with localhost URL. Now consider we have multiple instances of the services are working on a different ports and different URL's then it would be difficult to get the correct URI Information with the "localhost" hostname. So in order to avoid this complexity, we can change the host information like URI Information and will give the application name.
Consider a Scenario, where i need to connect to User Service Application, so i should not be worried about any host information. I should be connecting to User Service with the help of application name and not with local url(which avoids complexity).

Replace "http://localhost:9001/departments/" with "application.name" value in "UserService.java" because we would be calling Department data from User Service.
ex:- Replace "http://localhost:9001/departments/" with "http://DEPARTMENT-SERVICE/departments/".
Note:- DEPARTMENT-SERVICE is the application name we will provide in application.yml file. ex:- spring.application.name: "DEPARTMENT-SERVICE" in Department Microservice.
We are avoiding or removing the complexity of calling url:localhost:9001 to simply "DEPARTMENT-SERVICE" which is an application name in Department MS. So whereever this application is working  either in any port or any other service, if its connected to service registry then i should get the info for that particular api call. in our case, "DEPARTMENT-SERVICE" could be running on any port or any other service, by simply calling url with "http://DEPARTMENT-SERVICE/departments/", we should be getting the appropriate result.

Now if we try to fetch the user details by userid, we would be getting the error. This is because we need to tell the rest template as well that "We are connected to service registry, so u need to load balance ur request". So In order to work this, we need to add "@LoadBalanced" on top of restTemplate() method. so by adding this, if multiple services available connected to service registry then it will load balance the request for us.

Post this if we try to fetch the user details by userid again, this would be working and we will see "user" and "department" data. And Now this is directly getting the deparrment from the "DEPARTMENT-SERVICE" application name and not from hostname and port information. So this is Service registry helping us to identify which are all MS's are up and running and we can directly connect to different MS's with the Spring Application Name  itself.


API-Gateway / Routing Configuration / Cloud Gateway:- (9191)
------------------------------------------------------------
Create a separate MS visiting "start.spring.io" and add dependencies.
a) Eureka discovery client:- Need to register to my Service Registry.
b) gateway
c) actuator

In application.yml, provide below configuration,

a) application name. ("API-GATEWAY")
b) eureka-client registry. ( Same we used for User MS )
c) cloud gateway

ex:-
----
spring:
  application:
    name: API-GATEWAY
  cloud:
    gateway:
      routes:
        - id: USER-SERVICE
          uri: lb://USER-SERVICE
          predicates:
            - Path=/users/**
        - id: DEPARTMENT-SERVICE
          uri: lb://DEPARTMENT-SERVICE
          predicates:
            - Path=/departments/**
			
Use of API Gateway is initially we were calling directly url of specific MS to get or post the data, by using Routing Mechanism (added configuration in yml), all the api request are been travered through API Gateway and not calling directly url of specific MS.

Circuit-Breaker:-
-----------------
Circuit-Breaker will identify the Services/MS's which are not running and it will run the fallback methods available and it will notify the users like "The Specific Service is not running/working". As a circuit-breaker, will be implementing the Hystrix library and will implement the Hystrix-dashboard so that we can identify which are all the MS's are running and which all MS's are not running.

Will implement the Hystrix in Cloud gateway Service

Add Dependencies:-
------------------
a) Hystrix. ( circuit breaker  with Spring Cloud Netflix Hystrix ).
click on explore and copy the dependency tag which states "spring-cloud-starter-netflix-hystrix" and add it in cloud gateway pom.xml file under dependencies section tag.
b) @Enablehystrix on top of main method. @EnableEurekaClient

In Cloud Gateway MS, Create a controller Name "FallBackMethodController" and add a method for UserService with @GetMapping("/userServiceFallBack") with return type as String stating "User Service is taking Longer than Expected. Please Try Again". Same for DepartmentService as well.

Now we need to provide the configuration where User/Department Service is taking longer time to respond.

Below is the configuration we need to add in application.yml file (need to append):-

spring:
  application:
    name: API-GATEWAY
  cloud:
    gateway:
      routes:
        - id: USER-SERVICE
          uri: lb://USER-SERVICE
          predicates:
            - Path=/users/**
          filters:
            - name: CircuitBreaker
              args:
                name: USER-SERVICE
                fallbackuri: forward:/userServiceFallBack
        - id: DEPARTMENT-SERVICE
          uri: lb://DEPARTMENT-SERVICE
          predicates:
            - Path=/departments/**
          filters:
            - name: CircuitBreaker
              args:
                name: DEPARTMENT-SERVICE
                fallbackuri: forward:/departmentServiceFallBack
				
				
hystrix:
  command:
    fallbackcmd:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 4000
			
			
management:
  endpoints:
    web:
      exposure:
        include: hystrix.stream
			
Above is the Hystrix configuration has been added. And Also added configuration for actuators, Enabling Hystrix.stream, so that we can use this info in Hystrix dashboard.
				
Adding timeout in MilliSeconds as 4 secs. If i am not getting the response from either of the service with in 4 secs then my request will be forwarded to either "userServiceFallBack" or "departmentServiceFallBack" which ever is down.

Create MS for Hystrix Dashboard:-( 9295 )
------------------------------------------
Add Dependencies:-

a) Eureka Discovery Client
b) hystrix dashboard

configurations:-
----------------
a) provide application name in yml file as "HYSTRIX-DASHBOARD".
b) Enable "Hystrix-Dashboard" by using "@EnableHystrixDashboard" on top of main method.
c) Also Enable Eureka-Client by using "@EnableEurekaClient"
d) Add Eureka-Client configuration in yml file ( Same as USER-SERVICE )
e) Add Hystrix-Dashboard configuration
ex:-
----
hystrix:
  dashboard:
    proxy-stream-allow-list: "*"
	
		
Create a MS name as cloud-config-server:-
-----------------------------------------
For Eureka Client, As of now we have configured eureka client "service-url.default-zone" and "hostname" with same value in each and every MS. So this info is available in all the MS. Suppose there is change in any of the "default-zone" or "hostname" or any of the properties then we have to go and change in every places. so this is not feasible when we are working with 100's or 1000's of MS's. so we need to externalise/centralize or need to create 1 Configuration Server and from there we will be able to get all the configuration and we can use in all our MS's.
Will add all our configuration in github repo or any other place so that will be our external configuration and all our MS will be talking to this Configuration.

Dependencies:-
--------------
a) Eureka Discovery Client. ( So that we can register to our service-registry )
b) config server

Add configurations:- ( 9296 )
------------------------------
a) Add "@EnableEurekaClient" on top of main method.
b) Add "@EnableConfigServer" on top of main method to enable config server.
c) In yml file, add spring application name as "CONFIG-SERVER"

Now will create 1 git repository and there will create 1 application.yml file and  will store all our default configurations.

Go to github "github.com", click on new and provide Repository name as "config-server" and click on create-repository.
click on "create a new file" and will name as "application.yml". In this yml file, will store all our default configurations.
Below is the configuration, that has been used in all our MS's for eureka client.

eureka:
  client:
    register-with-eureka: true
	fetch-registry: true
	service-url:
	  default-zone: http://localhost:8761/eureka/
  instance:
   hostname: localhost
   
copy above configuration and paste in github yml file which we have create recently in github.

And click on "commit new file".

Now we need to do this configuration for this particular github repository.

Below is the configuration we need provide in yml file of "cloud-config-server" MS.

spring:
  application:
    name: CONFIG-SERVER
  cloud:
    config:
      server:
        git:
          uri: https://github.com/shabbirdwd53/config-server
          clone-on-start: true
		  
Now above file is our config server. Now in all our other MS's we need to talk to this config-server. Need to enable the config-client over there (Other MS) and we need to point to this particular URL over here.
Now add dependencies and configurations in all over MS.

Configurations in DEPARTMENT-SERVICE:-
--------------------------------------
a) In pom.xml file, Add "Spring-cloud-starter-config" dependency. ( Same in other MS )
b) create bootstrap.yml file and add below configuration that file, so that we can directly talk to our config-server.

spring:
  cloud:
    config:
      enabled: true
	  uri: http://localhost:9296
	  
And Also remove eureka-client registry from all MS, since we have added this configuration in github application.yml file as a default configuration.
Add this bootstrap.yml file in all other MS. (User, Department, Cloud-Gateway, Hystrix-Dashboard, Cloud-config-server).

1st will start the Registry, then config-server, then API-Gateway, then all other MS.

-----------------------------------------------------------------------------------------------------------------------------------------

Circuit-Breaker Pattern:-
-------------------------
-> In Circuit Breaker there are 3 states,
a)Closed (Default):- Both Services Up and Running.(User and Catalog)

b)Open:- Lets say Threshold as 50%, It means 50% of call from "user" to "catalog" will fail, then immediately status change from "close" to "open". In "Open State", Circuit Breaker won't allow  you to call dependent microservices.

c)half Open:- We have set of timeout, and once the timeout expired, the status change to half-open. Lets say we set the timeout as 5 sec and after 5 second, status change to half-open. In half-open state, it will allow only few calls to go through and check availability of catalog service. if it fails again then the status change to open. And if catalog service is back online then status will changed to close again.

We Use Resilience4J, if any Microservice is down, still want to give some response back to the end user.

Add few dependencies in pom.xml,
a) spring-boot-starter-actuator (groupId (org.springframework.boot)):- To Find the health of Microservices.
b) spring-boot-starter-aop  (groupId (org.springframework.boot)):- It will keep send the matrix to actuator,so that we can track circuit breaker status
c) resilience4j-spring-boot2 (groupId (io.github.resilience4j)):- resilience4j to implement circuit-breaker pattern.

-> On top of Controller Method, Add @CircuitBreaker(name = "userService", like 

	public static final String USER_SERVICE="userService";

	@GetMapping("/displayOrders")
    @CircuitBreaker(name =USER_SERVICE, fallbackMethod = "getAllAvailableProducts")
    public List<OrderDTO> displayOrders(@RequestParam("category") String category) {
        String url = category == null ? BASEURL : BASEURL + "/" + category;
        System.out.println("retry method called "+attempt++ +" times "+" at "+new Date());
        return restTemplate.getForObject(url, ArrayList.class);
    }
	
	public List<OrderDTO> getAllAvailableProducts(Exception e){
        return Stream.of(
                new OrderDTO(119, "LED TV", "electronics", "white", 45000),
                new OrderDTO(345, "Headset", "electronics", "black", 7000),
                new OrderDTO(475, "Sound bar", "electronics", "black", 13000),
                new OrderDTO(574, "Puma Shoes", "foot wear", "black & white", 4600),
                new OrderDTO(678, "Vegetable chopper", "kitchen", "blue", 999),
                new OrderDTO(532, "Oven Gloves", "kitchen", "gray", 745)
        ).collect(Collectors.toList());
    }
	
We Call this fallbackMethod = "getAllAvailableProducts", If above Get API fails, then will call fallback method to return the appropriate response.
fallbackMethod = "getAllAvailableProducts", returns the list of OrderDTO. As shown above in code.

Add Configuration in yml file for circuit breaker
-------------------------------------------------
management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always
	  

resilience4j:
  circuitbreaker:
    instances:
      userService:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
		
		
Note:-
------
"management.endpoints.web.exposure.include: health" :-  Expose all web endpoints of actuator.
"management.endpoint.health:show-details: always"   :-  Endpoint show details always.
"failureRateThreshold:50" :-  If 50% of request fails(From User to Catalog), then change status to open.
"automaticTransitionFromOpenToHalfOpenEnabled: true"  :- After 5 sec's, Open to "half-open" transition happen Automatically.
"permittedNumberOfCallsInHalfOpenState: 3" :- After 3 calls, if status is succeed, then status will change to closed. If not then status is "open".



Resilience4J Retry Pattern:-
----------------------------
Lets say, User-Service called Catalog-Service and received Unexpected response. User-Service need to re-attempt few calls again and again in some time interval.- In Any of attempts, Catalog-Service back to online then we are good oterwise we have option to return FallBack response to end-user. 

Some configuration changes in yml file Resilience4J Retry Module:-

management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always
	  

resilience4j:
  circuitbreaker:
    instances:
      userService:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
  retry:
    instances:
      userService:
        maxRetryAttempts: 5
        waitDuration: 10s

Controller Class:-
------------------

private static final String BASEURL = "http://localhost:9191/orders";
public static final String USER_SERVICE="userService";

private int attempt=1;

	@GetMapping("/displayOrders")
    //@CircuitBreaker(name =USER_SERVICE, fallbackMethod = "getAllAvailableProducts")
	@Retry(name = USER_SERVICE,fallbackMethod = "getAllAvailableProducts")
    public List<OrderDTO> displayOrders(@RequestParam("category") String category) {
        String url = category == null ? BASEURL : BASEURL + "/" + category;
        System.out.println("retry method called "+attempt++ +" times "+" at "+new Date());
        return restTemplate.getForObject(url, ArrayList.class);
    }
	
	public List<OrderDTO> getAllAvailableProducts(Exception e){
        return Stream.of(
                new OrderDTO(119, "LED TV", "electronics", "white", 45000),
                new OrderDTO(345, "Headset", "electronics", "black", 7000),
                new OrderDTO(475, "Sound bar", "electronics", "black", 13000),
                new OrderDTO(574, "Puma Shoes", "foot wear", "black & white", 4600),
                new OrderDTO(678, "Vegetable chopper", "kitchen", "blue", 999),
                new OrderDTO(532, "Oven Gloves", "kitchen", "gray", 745)
        ).collect(Collectors.toList());
    }


Resilience4J Rate Limiter Pattern:-
-----------------------------------
If we declare "limitForPeriod" as 10, then withIn 10 secs of interval, only 10 requests are allowed, after that if there is another request, then "timeoutDuration" will wait for 3 secs and ur request will be processed.

Add few dependencies in pom.xml like web and Resilience4J.

Some configuration changes in yml file Resilience4J RateLimiter Module:-

management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always

resilience4j:
  circuitbreaker:
    instances:
      userService:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
  retry:
    instances:
      userService:
        registerHealthIndicator: true
        maxRetryAttempts: 5
        waitDuration: 10s
  ratelimiter:
    instances:
      userService:
        registerHealthIndicator: false
        limitForPeriod: 10
        limitRefreshPeriod: 10s
        timeoutDuration: 3s
		
Controller Class:-
------------------

@GetMapping("/displayOrders")
    //@CircuitBreaker(name =USER_SERVICE, fallbackMethod = "getAllAvailableProducts")
	//@Retry(name = USER_SERVICE,fallbackMethod = "getAllAvailableProducts")
	@RateLimiter(name = USER_SERVICE,fallbackMethod = "getAllAvailableProducts")
    public List<OrderDTO> displayOrders(@RequestParam("category") String category) {
        String url = category == null ? BASEURL : BASEURL + "/" + category;
        System.out.println("retry method called "+attempt++ +" times "+" at "+new Date());
        return restTemplate.getForObject(url, ArrayList.class);
    }
