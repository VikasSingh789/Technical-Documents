Q) What is microservices and example?
A) Microservices are an architectural style that develops a single application as a set of small services. Each service runs in its own process. The services communicate with clients, and often each other, using lightweight protocols, often over messaging or HTTP.

Q) What are the components of a microservice?
A)  a) Microservices 
	b) Containers
	c) Service mesh 
	d) Service discovery
	e) API gateway
	f) Service Registry
	g) Load Balancing
	
a) MicroServices:- The main component of microservices architecture is the self-contained services. They can be any language and function separate from one another, making them ideal for implementation through various software teams.

b) Containers:- Containers are a lightweight, efficient and standard way for applications to move between environments and run independently. Everything needed to run the application is packaged inside the container object: code, run time, system tools, libraries and dependencies. Containers provide efficiency because they only rely on specific dependencies and the underlying code within the service.

c) Service mesh:- A service mesh is a layer built into an application that controls service-to-service communication in a microservices architecture. It controls the delivery of service requests to other services, performs load balancing, encrypts data, and discovers other services. It's responsible for the communication between microservices via a messaging layer. A Service Mesh is layer that makes communication between microservice applications possible, structured, and observable.

d) Service discovery:- Service Discovery helps by providing a database of available service instances so that services can be discovered, registered, and de-registered based on usage.
-> In order to send an API request to a service, the client or API gateway must know the location of the service that itâ€™s addressing.
-> The service provider registers its location in the service registry.
-> The client looks for relevant service locations in the service registry.
-> The service registry returns the location of the required microservice.
-> The client directly calls the microservice.

e) API gateway:- An API gateway is focused on routing requests to the appropriate microservice. An API gateway serves as a reverse proxy to accept API calls from the client application, forwarding this traffic to the appropriate service. 

f) Server Registry:- Service registry is the registry where all services register themselves, giving a way to contact them (public API, IP, port).
-> A service registry is a database used to keep track of the available instances of each microservice in an application.
-> We use ServiceRegistry to manage all vast details, Scale Up and maintain all ports and URI information of all MS. ServiceRegistry Will maintain all the MS's. All the MS's will be connected to this ServiceRegistry and will get all the information regarding all the services.
ex:- status update, what are the port info and URL etc.

g) Load balancer:- Load balancing is the process of distributing traffic among different instances of the same application. Load balancer is focused on Distributing requests evenly across a group of backend servers.

Q) What is Service Registry
A) A service registry is a database used to keep track of the available instances of each microservice in an application. The service registry needs to be updated each time a new service comes online and whenever a service is taken offline or becomes unavailable. This can be achieved with either self-registration or third-party registration.
-> We use ServiceRegistry to manage all vast details, Scale Up and maintain all ports and URI information of all MS. ServiceRegistry Will maintain all the MS's. All the MS's will be connected to this ServiceRegistry and will get all the information regarding all the services.
ex:- status update, what are the port info and URL etc.

Q) What is Eureka Server in Microservice
A) Eureka Server is an application that holds the information about all client-service applications. Every Micro service will register into the Eureka server and Eureka server knows all the client applications running on each port and IP address. Eureka Server is also known as Discovery Server.

Q) what is config server in microservices
A) Config Server is an externalized application configuration service. It is based on the open-source Spring Cloud Config project, which provides a centralized server for delivering external configuration properties to an application and a central source for managing this configuration across deployment environments.

Q) Microservice vs Service-Oriented architecture
A) While microservices use loose connections and APIs, SOA uses protocols to create an application and create functionality and compatibility for services.
This system lacks when it comes to operating within the cloud and cloud computing processes. It can't compete due to latency and lack of scalable service. 
There are varying opinions on the evolution of SOA to microservices. Many feel it's a more granular approach to application architecture, while others think it's platform-agnostic and may find its purpose within the microservices management process and architecture pattern.
Its new features allow it to handle cloud-based services and computing with ease and fewer restrictions for parts of the application.

Q) Why Microservices are better than Monolithic architecture
A) As mentioned previously, microservices are so compatible with today's need to scale business because they create independent connections that are flexible and customizable.
-> With monolithic architecture, one executable file is stored with the code, making it more complex to use and troubleshoot.
-> In the microservices system, it's easy to define and locate the source of the code issues, whereas, in a monolithic architecture, it's much more difficult to pinpoint. That means more workforce demands and holdups or delays.
-> Testing also creates a situation where more intensive efforts are needed. When there are any changes or updates, the entire application is affected and may require a new version of the application. All of these points add up to considerably more cost, maintenance, and planning when using a monolithic application.
-> Monolithic applications are also challenging to scale with constantly changing needs.

Q) Benefits of Microservices
A) A microservices application is designed to create scalability via pipelines. This service-oriented architecture is more straightforward for development teams to navigate and maintain from day to day.
-> Integrating this system for data management reduces latency. It can also optimize the technology stack to make a business capable of adding additional services as well as make connecting with a web application and various platforms less complex.

Q) Drawbacks to Using Microservices Architecture
A) While there are many advantages to using this architectural style, there are some potential disadvantages to consider. For example, there might be some latency at times if considerable use occurs.  
-> There may also be some comprehensive security requirements along with complex testing. Extra attention is sometimes required to create communications channels between connected services. And finally, there may be too much granularity within the complex web of connections.
