Q) What is JRE, JDK and JVM
A) JDK:- JVM (Java Virtual Machine) is an abstract machine. It is called a virtual machine because it doesn't physically exist. 
-> It Provides a runtime environment in which Java bytecode can be executed. 
-> It can also run those programs which are written in other languages and compiled to Java bytecode.
-> It Performs the tasks such as Loads code, Verifies code, Executes code and Provides runtime environment.

JRE:- Java Runtime Environment(JRE) is a set of software tools which are used for developing Java applications. 
-> It is used to provide the runtime environment. 
-> It is the implementation of JVM. It physically exists. 
-> It contains a set of libraries like ".jar" + other files that JVM uses at runtime.

JDK:- The Java Development Kit (JDK) is a software development environment which is used to develop Java applications and applets. 
-> It physically exists and It contains JRE + development tools.(Ex:- javac and java).
-> The JDK includes JRE, interpreter/loader (java), a compiler (javac), an archiver (jar) etc. and other development tools.

Note:- Typically, We need only JRE to run Java programs on your machine or browser. However, if we want to develop an application, debug and do Java programming, you will need JDK.

Q) What is Singleton class in Java
A) Singleton class is a class that can have only one object creation.
-> After the first time, if we try to instantiate the Java Singleton classes, the new variable also points to the first instance created.
-> So whatever modifications we do to any variable inside the class through any instance, affects the variable of the single instance created.

-> The primary purpose of a java Singleton class is to restrict the limit of the number of object creations to only one.
-> This often ensures that there is access control to resources, for example, socket or database connection.

Advantages:-
------------- 
-> Memory space wastage does not occur with the use of the singleton class because it restricts instance creation.
-> Better control Access to shared resources and Reduces memory consumption, and maintain consistency.
-> It prevents multiple instances that could cause conflicts.

Q) How to Design/Create a Singleton Class in Java?
A) 1) Ensure that only one instance of the class exists.
2) Declaring all constructors of the class to be private.
3) Providing a static method "getInstance()" that returns a reference to the instance.
4) The instance is stored as a private static variable.

Ex:-
----
class Singleton {

 // private static Singleton single_instance = new new Singleton(); //This is Eager Initialization, Instance is created as soon as the class is loaded.
    private static Singleton single_instance = null;
    public String s;
 
    private Singleton()
    {
        s = "Hello I am a string part of Singleton class";
    }
    
    // Here, we will be creating private constructor, restricted constructor to this class itself
    public static synchronized Singleton getInstance()
    {
        if (single_instance == null)
            single_instance = new Singleton();  //This is Lazy Initialization since we are creating object only when "getInstance()" method is called.
 
        return single_instance;
    }
}

class GFG {
    public static void main(String args[])
    {
        Singleton x = Singleton.getInstance();
        Singleton y = Singleton.getInstance();
        Singleton z = Singleton.getInstance();
        
        if (x == y && y == z) {
            System.out.println("Three objects point to the same memory location on the heap i.e, to the same object");
        } else {
            System.out.println("Three objects DO NOT point to the same memory location on the heap");
        }
    }
}

output:- 
--------
Three objects point to the same memory location on the heap i.e, to the same object.

Note:- In Above Example, if we changes value of any 1 variable, say x, then the same changes also applies to the other variables as well. (y and z).

Q) How many ways we can create String Object in Java.
A) 2 ways:- By String Literal and By "new" keyword.
String Literal:- String str = "Vikas";              // 1 Object will be created in SCP Area.
New Keyword:-    String str = new String("Vikas");  // 2 Objects will be created. 1 in Heap and 1 in SCPA(String Constant Pool Area). But it will refers to Heap Area Object.

String str = "Vikas";
str.concat(" Singh");
System.out.println(str); //str still points to "Vikas".
Output:- Vikas  // Here Vikas is not changed, but a new object is created with "Vikas Singh" in SCPA. Thats y String is Immutable. Now SCPA has 2 Objects "Vikas" and "Vikas Singh".

-> But If we assign explicitly to the referene variable, then it will refer to "Vikas Singh". Below is Example,
Ex:- String str = "Vikas";
     str = str.concat(" Singh");
     System.out.println(str);
     Output:- Vikas Singh  // Now str points to "Vikas Singh". Please Notice, "Vikas" Object is still not modified.

Q) Difference Between ClassNotFoundException and NoClassDefFoundError in Java?
A) ClassNotFoundException:- ClassNotFoundException comes when we try to load a class at run-time using Reflection and if those class files are missing then application or program thrown with ClassNotFoundException Exception. 
There is nothing to check at compile-time since it is loading the class at run-time.
Example:-
---------
public class ClassNotFoundExceptionTest {
   public static void main(String[] args) {
      try {
         Class.forName("Test");
      } catch (ClassNotFoundException cnfe) {
         System.err.println("You are trying to search for a class is not existing. "+cnfe);
      }
   }
}

NoClassDefFoundError:- NoClassDefFoundError is thrown when a class has been compiled with a specific class from the classpath but if same class not available during run-time. 
Missing JAR files are the most basic reason to get NoClassDefFoundError.
Example:-
---------
class Test1 {
   public void show() {
      System.out.println("show() method called");
   }
}
public class Test2 {
   public static void main(String[] args) {
      Test1 t = new Test1();
      t.show();
   }
}

-> When we compile both the classes we will be getting two class files Test1.class and Test2.class, while running Test2 class just remove the Test1.class file then we will be getting NoClassDefFoundError as below

Q) What is Checked Exception and UnChecked Exception
A) Checked Exception:- Exceptions which are checked by the Java Compiler which Occurs at Run Time. (File Wont compile).
-> Checked Exceptions should be Handled by programmer using Either "throws" or "try Catch" block.
-> If we dont use any either of this, then our compiler will not compile our code.
-> Even Before you are able to run, ur compiler throws an Exception Saying "UnHandled Exception type...".
Ex:- 
-----
1) FileNotFoundException  //Possibility of FileNotFoundException when we deal with Files.
2) Interrupted Exception  //Thread.sleep

UnChecked Exception:- Exceptions which are Unchecked/Not Checked by the compiler is called UnChecked Exception.
-> Code Which gets Compiled but Exception will occurs at RunTime.
-> These Exceptions will get by Program Errors like, Dividing 10/0, or fetching the Length of String which is Null.
Ex:- ArithmeticException(50/0), ArrayIndexOutOfBoundsException and NullPointerException(s.length()).

Q) What is Exception Propagation
A) If we dont want to handle the exception by using "try&catch" then we can propagate or fwd that exception to other method by using "throws" keyword on method level.
-> We use "throws" keyword to propagate the exception.
-> Unchecked Exceptions are by default propagated but checked Exceptions are need to be propagated.
-> Unchecked Exceptions like "NullPointerException" will be propagated by default if we dont handle in "try&catch" block.
-> if we use "try&catch" block, the Exception Propagation wont happen.
ex:-  void m1() throws IOException {
	int a = 10/0; // UnChecked Exception
      }

-> checked Exception will get detected at compile time. we can declare checked exception by using "throw" keyword.
ex:- throw new IOException()
->  These checked exceptions must be caught or declare to be thrown.
a) Exceptions must be caught by using "try&catch" block (or)
b) If we dont want to handle exceptions, then we can declare/throw exceptions/propagate the exception by using "throws" keyword like "throws IOException" on method level.

-> If we propagate and handle the Exception in same method, then will face Exception issue at run time. 
ex:-
----
void m3() throws IOException{
	try{
		m2();
	}catch(){
		io.printStackTrace();
	}
}

main(){
m3();
}

By above code, on method m3() we are trying to propagate the exception by "throws" keyword and also handling the Exception by using "try&catch" block in same m3() method, so in this case will get Exception at run time because, though we have handled the exception, we are using "throws" keyword to propagate the Exception.

Q) What is Volatile in java
A) Volatile keyword is used to modify the value of a variable by different threads. It is also used to make classes thread safe. It means that multiple threads can use a method and instance of the classes at the same time without any problem. The volatile keyword can be used either with primitive type or objects.

Q) What is Synchronization
A) Synchronization in java is the capability to control the access of multiple threads to any shared resource. In the Multithreading concept, multiple threads try to access the shared resources at a time to produce inconsistent results. The synchronization is necessary for reliable communication between threads.
(or)
Synchronization in Java is the process that allows only one thread at a particular time to access the Shared Resources.

Q) What is Encapsulation
A) Encapsulation is a mechanism through which we can wrap the data members(variables) and data methods of class in a single Unit.
-> Class variables are hidden from other classes and can only be accessed by the methods of the class in which they are found.

Q) How to create Encapsulation Class in Java
A) Declare variables as private // Data Hiding to acheive Encapsulation
-> Declare methods as public to retrieve and modify the values of the instance variables. // Data Abstraction.

Q) What is the Need of Encapsulation in Java
A) Better Control:- Encapsulation provides ultimate control over the data members and data methods inside the class.
Security:- Encapsulation prevents access to data members and data methods by any external classes. The encapsulation process improves the security of the encapsulated data.
Flexibility:- Changes made to one part of the code can be successfully implemented without affecting any other part of the code.
Data Hiding:- To avoid access to the data members and data methods and their logical implementation from the Other Classes.

Q) What is Covariant Return Type
A) The covariant return type specifies that the return type subclass may vary against return type of super class. 
-> the return type of the get() method of A class is A but the return type of the get() method of B class is B. Both methods have different return type but it is method overriding. This is known as covariant return type.

Q) Difference between append and concat in java
A) 
Concat:-
--------
-> its belong to String class. concatenates one string to the end of another string.
-> concat() method takes only one argument of string and concatenates it with other string.
-> concat() method takes only string arguments, if there is any other type is given in arguments then it will raise an error.
-> concat() method throws NullPointer Exception when a string is concatenated with null
-> concat() method is better than the + operator because it creates a new object only when the string length is greater than zero(0) but the + operator always creates a new string irrespective of the length of the string.

append or +:-
-------------
-> + operator takes any number of arguments and concatenates all the strings.
-> + operator takes any type and converts to string type and then concatenates the strings.
-> + operator did not raise any Exception when the string is concatenated with null.
-> + operator creates a new String object every time irrespective of the length of the string.

Q) What is Thread Safe in Java
A) When a Thread is already working on an object and preventing another thread on working on the same object, this process is called Thread-Safety.

Q) What is the use of Thread Safe in Java
A) When multiple threads are working on the same data, and the value of that data is changing, that scenario is not thread-safe and we will get inconsistent results.
-> In order to avoid this Data Inconsistency, we can go for Thread Safety.

Q) How to achieve Thread Safety
A) There are four ways to achieve Thread Safety in Java. These are:
Using Synchronization.
Using Volatile Keyword.
Using Atomic Variable.
Using Final Keyword.

1) Synchronization:- Synchronization is the process of allowing only one thread at a time to complete the particular task. 
-> So synchronization is used to resolve inconsistency problem by allowing only one thread at a time.
-> Synchronization uses a "synchronized" keyword on top of method.

2) Volatile:- A volatile keyword is a field modifier that ensures that the object can be used by multiple threads at the same time without having any problem. 
-> volatile is one good way of ensuring that the Java program is thread-safe.
-> volatile keyword can be used as an alternative way of achieving Thread Safety in Java.

3) Atomic Variable:- Using an atomic variable is another way to achieve thread-safety in java. When variables are shared by multiple threads, the atomic variable ensures that threads don’t crash into each other. 

4) Final Keyword:- Final Variables are also thread-safe in java because once assigned the value cannot be changed.

Q) What is the use of Immutable class in Java
A) Immutable objects are inherently thread-safe.
-> Since their state cannot change after creation, multiple threads can safely access them concurrently without the risk of race conditions or data corruption.
-> An immutable class is good for caching purposes because you don't have to worry about the value changes.
-> All the wrapper classes (like Integer, Boolean, Byte, Short) and String class is immutable.

Q) How to create custom Immutable class in java
A)  a)Make your class final
    b)Declare all the variables private and final
    c)Say no to Setter Methods
    d)Initialize all variables in constructor

Q) What is Wrapper Class in Java
A) Wrapper Class in Java provides the mechanism to convert primitive into object and object into primitive.
-> Auto-boxing and Unboxing feature convert primitives into objects and objects into primitives automatically.

AutoBoxing:- The automatic conversion of primitive data type into its corresponding Object/wrapper class is known as Auto-boxing. (Primitive to Wrapper)
-> byte to Byte, char to Character, int to Integer, long to Long, float to Float, boolean to Boolean, double to Double, and short to Short. are Example of Auto-boxing.
-> Since Java 5, we do not need to use the valueOf() method of wrapper classes to convert the primitive into objects.
Ex:- (Primitive to Wrapper)
----
int a = 20;  
Integer i=Integer.valueOf(a);   //converting int into Integer explicitly  
Integer j=a;                    //autoboxing, now compiler will write Integer.valueOf(a) internally

Unboxing:- The automatic conversion of wrapper type into its corresponding primitive type is known as unboxing. (Wrapper to Primitive)
-> It is the reverse process of autoboxing. 
-> Since Java 5, we do not need to use the intValue() method of wrapper classes to convert the wrapper type into primitives.
Ex:- (Wrapper to Primitive)
---------------------------
Integer a = new Integer(3);    
int i=a.intValue();     //converting Integer to int explicitly  
int j=a;                //unboxing, now compiler will write a.intValue() internally.

Q) What is the use of Wrapper Classes in Java
1) Representing primitive data types as objects:- In Java, sometimes we might need to use objects instead of primitive data types. For example, while working with collections.
Ex:-
----
// error
ArrayList<int> list = new ArrayList<>();

// runs perfectly
ArrayList<Integer> list = new ArrayList<>();
-> In such cases, wrapper classes help us to use primitive data types as objects.

2) Storing null values: Primitive data types in Java cannot store null values, but wrapper classes can be set to null, which can be useful in representing missing or unknown values.
-> We can store the null value in wrapper objects. For example,
Ex:-
----
// generates an error
int a = null;

// runs perfectly
Integer a = null;

3) Converting between primitive data types and strings: Wrapper classes provide methods for converting primitive values to and from strings, which can be useful for reading data from a file or user input.
4) Comparing values: Wrapper classes provide methods for comparing values, such as equals() and compareTo(), which can be useful for sorting and searching.
5) Serialization can allow only object data.

Q) Which one is good to store password in Java ? String or char[] & why
A)  a)If we store our "passwords" in String, it may get stored in memory untill GC clears the memory.
b)SCPA is used for reusability, there is a pretty  high chance that it will remain in memory for long duration.
c)The 1 who have access to Memory Dump, can find the password in clear text
d)Since Strings are Immutable, there are no way, contents of Strings can be changed because any change will produce new String.
e)We can set our passwords in "char[]", we can still set to blank or zero. And by using Array, even if we print array, its content won't get displayed but its location will be visible.
	
Ex:-
String strPassword="Unknown";
char[] charPassword = new char[]{'U','n','k','n','o','w','n'};
System.out.println("String Password: "+ strPassword);
System.out.println("Character Password: "+ charPassword);

Output:-
--------
String Password: Unknown
Character Password: [C@110b53]

Q) Why wait(),notify() and notifyAll() methods are in Object Class not in Thread Class.
A) As every Object in Java has only 1 lock or monitor and "wait(),notify() and notifyAll()" are used for monitor sharing. These methods works on locks and locks are associated with onjects not the threads. And thats the reasaon all these 3 methods are in Object class.
(or)
Every Object is associated with monitor. Only 1 Thread can hold the monitor at a time. acquiring the object, monitor allow thread to hold lock on object. These methods are not called on the thread as it does not have its own lock as the monitor is with the object. wait() is called on the object to have the thread move to wait() state.
-> Similarly, "notify() and notifyAll()", is called on the Object to notify the waiting thread.
(or)
-> Every object in java has only one lock(monitor) and wait(),notify(),notifyAll() are used for monitor sharing thats why they are part of Object class rather than Thread class.
-> These methods works on the locks and locks are associated with Object and not Threads. Hence, it is in Object class.
-> wait() and notify() work at the monitor level and monitor is assigned to an object not to a particular thread. 
-> Hence, wait() and notify() methods are defined in Object class rather than Thread class.

Q) What is Class loader in java and its types
A) Class Loaders are the Base class which has to be loaded before running or compiling any of our applications 
a) Bootsrap ClassLoader:- Its the base classes which is required to up and run the JVM. It runs all the classes available in rt.jar.
b) System ClassLoaded:- classes which is required like lang package which is present in rt.jar/lib.
c) Application ClassLoader:- classes which are there in your class which has to be compiled.


Q) Difference between path and class path
A)  a).Path is an environment variable which is used by the operating system to find the executables. Classpath is an environment variable which is used by the Java compiler to find the path, of classes.ie in J2EE we give the path of jar files.
b) .PATH is nothing but setting up an environment for operating system. Operating System will look in this PATH for executables. Classpath is nothing but setting up the environment for Java. Java will use to find compiled classes.
c) .Path refers to the system while classpath refers to the Developing Envornment.
d) In path we set the path of executables while in classpath we set path of jars for compiling classes.


Q) Which 1 is preffered to create Threads. Thread class or Runnable Interface
A) Implement the Runnable Interface, so that will have the option to extend the classes later on.

Q) When we face memory leak in java
A) -> Excessive use of static members
-> Unclosed Resources
-> Improper equals() and hashcode() Implementations
-> Excessive Session Objects
-> poorly written custome data structure.

static members:- These are not associated with any objects. Static Members have lifespan of almost application. whenever class is loaded in JVM at that time all static members allocated memory. It will remain in the memory untill the class loader become eligible for garbage collection.
