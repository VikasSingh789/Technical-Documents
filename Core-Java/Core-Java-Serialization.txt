NXT Wave CCBP

https://www.youtube.com/watch?v=8qY2w8Ags5c Interview Questions on Serialization

Q) What is Serialization and De-Serialization
A) Saving the state of an object to a file is called Serialization.
The Processs of converting an Object from normal Java Supported form to File / Network Supported Form. This convertion process is called Serialization.

The Processs of reading the an object from a file is called De-Serialization.
The Processs of converting File Supported Form in to Java Supported Form. This convertion process is called De-Serialization.

To Save Object in to File:-
----------------------------
By using Streams "File Output Stream" and "Object Output Stream", we can achieve / implement Serialization.

Object Output Stream:- Takes Object and convert in to Binary Data
OOS contains a Method called OOS.writeObject(d1);

File Output Stream:- Write / Convert Binary Data to the File.

To Read Object from the File:-
------------------------------
If we want to read Binary data from a file, we required a stream called "File Input Stream".
Object Input Stream is required to convert Binary data in to Object
Object Input Stream contains a method called OIS.readObject();


Q) What is Transient
A) Transient is modifier, can be applied only on variables. If we apply Transient on variable, JVM Ignores the Original value and it will not participate in Serialization and stores a the default value as 0. incase if datatype is "int".
ex:- transient int b=20;
output:-
-------
0.
The above output will be "0" if we try to print b value, because the variable is declared with transient. 

Static variable is a class level data and hence it wont participate in Serialization. static variables gets created 1st, compare to Object variables. It will be created at the time of Class Loading only.
Static variable is not part of Object state hence it wont participate in Serialization. Whereas Serialization only works on Object data.
Declaring Static on Transient variable, there will be no impact or no use at all.
ex:- public static transient int a = 10;

ex:-
static int a = 10;
int b = 20;
if we try to print the above "a" and "b" value, output will be 10 and 20. But "a" will be printed from Class level whereas "b" will be printed on Object level. 

Q) Final vs transient
A) Final variable is a constant. Its value never going to be change. Every final variable value will be replaced by CT Only. Every Final variable will be participated in Serialization directly by value.
ex:- 
final int a =10; ( It will store as only 10 )
int b=20; ( It will store as b = 10 )
In above example, "a value" will always going to be the same. i.e (a value always be 10. (a=10)).
"b value" cant be always 20. there may be a chance of value gets changed.

Even if we are declaring final variable with Transient, there is no use (Exactly same as static transient variable variable).
ex:- 
transient final int a =10;

Q) Serialization with Inheritance
A) If Parent class Implements Serialization and Child class doesn't Implements Serialization, even then we could able to perform Serialization operation on both variables of parent and child class.

If Parent class does'nt Implements Serialization and Child class implements Serialization, below is syntax,

class parent {
	int a = 10
}
class child extends parent implements Serialization{
 int j = 20;
}

From the above Example, 
1) To Serialize Child Class Object, Parent class need not to be Serializable.
2) During Serialization, JVM checks for any instance variable is inheriting from Non-Serialization area, In our case its "yes", then JVM ignores its actual / original value and saves default value as "0" for any variable which is not Serialized. (parent is not serialized).
output:-
--------
a = 0
b = 20


Q) What is SerialVersionUID
A) With Every Objecrt While Serialization, Sender side JVM will send a UniqueID. This UniqueID is known as SerialVersionUID.
Sender Side JVM is responsible to generate the SerialVersionUID.
Reciever Side JVM(De-Serialization) will use this SerialVersionUID.
To Identify whether it is a correct Object or not by the Reciever side JVM(De-Serialization), we use SerialVersionUID.

If we are depending on Default SerialVersionUID generated by JVM, there may occurs Several problems,

1) .class file at sender side JVM will generate a UniqueID as "101". 
But Sender is Using Unix based system (UNIX->1.6) version JVM. and this .class file generates "uid:101" Number.
But Reciever is using Windows based machine(W->1.8) version JVM.
Even though .class file is same from both sender and Reciever, there's no gurantee that Reciever .class file generate same UniqueID Number. i.e "101". It may change. Because there is a different JVM and Different Vendor. In this case will get Exception like "InvalidClassException".
This is because uid is different from sender to Reciever.

So, From Both Sender and Reciever, should use same version of JVM.

2) Consider a Scenario, After Serialization, Reciever Side .class file got modified by adding 1 more variable, then it may generate different UID. (say 103).
So In this case will get the Exception because Reciever Side couldn't able to read the data because of different UID Number.

So, Both Sender and Reciever shouyld use same .class file version.

3) At the Time of Serialization, Sender side JVM will send the UID. This UID will be generated by based on .class file.
If we depend on Default SerialVersionUID generated by JVM, and JVM uses complex algorithm to generate SerialVersionUID and it will impact on Performance.
To Overcome this problem, we have to configure our own UID or SerialVersionUID.
ex:- private static final long SerialVersionUID = 1L;
