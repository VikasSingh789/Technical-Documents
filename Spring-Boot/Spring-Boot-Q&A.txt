Q) What is the difference between Post and Put Method in SpringBoot
A) The PUT method is used to modify a single resource. The POST method is used to add a child resource. It can be cached. It cannot be cached.
-> Another important difference between the methods is that PUT is an idempotent method, while POST isn't. For instance, calling the PUT method multiple times will either create or update the same resource. In contrast, multiple POST requests will lead to the creation of the same resource multiple times.

Q) What is the difference between PUT and PATCH Method in SpringBoot.
A) put:- To update Entire Object. 
-> By using put, we must need to pass entire payload to change even single property.
patch:- To update partial object(few fields).
-> By using patch, we need not to provide entire json/object. only required property/variable needs to be provided.

Q) What is JAR in Java
A) Java Archive File. It is an Executable file. This file is given to the end users or client where he can execute the application without any compilation.
-> JAR (Java Archive) is a platform-independent file format aggregates many files in to one. It contains multiple files like .class, images and sounds.
-> JAR Format also supports compression, which reduces the size of the file.
-> A JAR file can be created by using following ways,
	a) By using Command-line jar tool
	b) By using IDE's like (STS and IntelliJ iD)
	c) By using java.util.jar API
	
Q) How to run SpringBoot Application by using Command-line Interface
A) We can run SpringBoot Application by run in main-method in single class.
-> But thats not how it runs in Production environment. We dont have an IDE in prod to run application.

Steps:-
-------
1) Download starter SpringBoot Project from "start.spring.io(Spring Initializer website). Make your coding changes in application.
2) To package this application to deploy to production, go to command prompt and run "mvn install" to take springboot project and generate a maven artifact as a jar file. This jar file contains all necessary to compiled source code and tomcat built-in. It contains all the dependencies that it needs to run.
3) This jar file will be generated in target class folder. "spring-boot-config-0.0.1-SNAPSHOT.jar".
4) change directory to target folder.
5) To run SpringBoot project from command line, use "java -jar jarname" cmd.
ex:- java -jar spring-boot-config-0.0.1-SNAPSHOT.jar
6) After running the above command, we could see the springboot application will be up and running in command prompt.

-> When we download project from "start.spring.io", will get these 2 maven cmd files, "mvnw.cmd" and "mvnw".
-> These are maven wrappers for maven that let us run maven even if we dont have installed maven in our machine.
-> If we are running SpringBoot projects, We dont even need maven installed in our machine. we can just run this wrapper files and they will do same act as maven cmd.
ex:- run "mvnw install". This step we call it as "Maven Wrapper".

-> By above steps, we required to run a build and then run a jar file to start the spring-boot application.

Note:- Other way to run this SpringBoot Application is by using source directory. i.e by using the spring target.
ex:- mvn spring-boot:run (runs spring boot application)
-> By this way we dont have to create jar file and run that. we are running it directly from Source.
-> "mvnw -Dmaven.test.skip=true spring-boot:run":- to skip the test cases and run springboot application.

Q) Why we should avoid the Spring Boot Framework.
A)  a)Spring Boot unnecessary increase the size of the build with unused dependencies.
b) its only suitable for micro-services which eventually need to deploy in docker, but not for large or mono lithics web service.

Q) What are the major starter dependencies of Spring Boot Application.
A) a) spring-boot-starter-parent:-
-> The spring-boot-starter-parent is a project starter. It provides default configurations for our applications. It is used internally by all dependencies. All         Spring Boot projects use spring-boot-starter-parent as a parent in pom. xml file.
-> provides default configuration for our application and a complete dependency tree to quickly build our Spring Boot.
-> It also Provides default configuration for maven plugins.

b) spring-boot-started-web:-
-> Starter of Spring web uses SPring MVC, REST and Tomcat as a default embedded server. The single "spring-boot-started-web" dependency transitively pulls in all dependencies related to web development.
-> It also reduces the build dependency count.

c) spring-boot-starter-test:-
-> This is the primary dependencyfor the test. It contains all majority of elements required for our tests.

Q) What is Componenet Scan in Spring Boot
A) It scans @Controller, @Componenet, @Service..and create beans out of that. It scans root and base packages.
To scan a particular package, @ComponenetScan( "com.example.demo.myapp" )

Q) How to disable auto-configuration in Spring Boot
A) a)Using the exclude attribute of @EnableAutoConfiguration
Ex:- 
----
@Configuration
@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})
public class CustomConfiguration{}

b) Using the exclude attribute for @SpringBootApplication annotation
Ex:- 
----
@SpringBootApplication(exclude=DataSourceAutoConfiguration.class)
public class CustomConfiguration{}

Q) How to disable the default web server in the spring boot application
A) spring.main.web-application-type=none

Q) how to disable main Spring Boot banner in console
A) spring.main.banner-mode=off

Q) How to set the logging level properties.
A) logging.level.org.springframework=ERROR.

Q) What is SpringBoot starter parent
A) Spring Boot Starter Parent defines spring-boot-dependencies as a parent pom. It inherits dependency management from spring-boot-dependencies.
	<parent>  
		<groupId>org.springframework.boot</groupId>  
		<artifactId>spring-boot-dependencies</artifactId>   
	</parent>  
Contains common dependencies like common-logging, Thymlief, Java default compiler (1.8), aspectJ and maven plugins etc..

Q) WHat is SpringBoot starter web
A) It is used for building RESTful applications using Spring MVC. It provides default embedded container which is tomcat server.
To remove default server(tomcat), we can user <exclusion> tag under web dependency. eg below,
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
    </exclusions>
</dependency>
Now Add jetty or other server, like below,
<!-- Jetty instead of Tomcat -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jetty</artifactId>
</dependency>

Q) What is spring boot starter test
A) It is the primary starter dependency for testing our spring boot application. It contains the majority of libraries that are required for tests including JUnit Jupiter, Hamcrest, and Mockito.

